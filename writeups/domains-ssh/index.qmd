---
title: "Troubleshooting SSH/SCP/rsync on Georgetown Domains"
date: last-modified
categories:
  - "Extra Writeups"
---

This tutorial assumes that you have already created a **Georgetown Domains** account. If you haven't already done so, or you're having trouble setting one up, please feel free to <a href="mailto:jj1088@georgetown.edu" target="_blank">email me</a>.

## Step 1: Creating a *Private Key*

To remotely access your Georgetown Domains server from your local computer (outside of the method we used before, of accessing the terminal through a web interface), you will first need to **create an SSH keypair**, which you can think of in two steps:

1. Georgetown Domains generates a "keyhole" on your Domains server, a **Public Key**, which allows your Domains server to be accessed remotely by someone who has the matching **private key**. Hence, it also creates a
2. **Private Key**: a file (in this case, it will be called `id_rsa`, with no file extension) that you save onto your computer, and you **remember where you saved it**, that will allow you to access your Georgetown Domains server remotely. There is a third piece of information here, which is the **passphrase** that will **protect** your private key from unauthorized usage (this is required by Georgetown, but is optional in general), but we'll worry about that in a moment.

Let's generate this keypair step-by-step:

### Step 1.1: Opening the "SSH Access" Tool in Georgetown Domains

Open your browser and navigate to the **Georgetown Domains dashboard**. This is the interface that opens if you navigate to [https://georgetown.domains/dashboard](https://georgetown.domains/dashboard){target="_blank"}

If you scroll down to the category of tools with the heading "Security", you will see an icon and a link for "SSH Access":

![](images/ssh_access.jpeg)

Click this link to open the SSH key generation page, and then once this page opens, click the "Manage SSH Keys" button:

![](images/manage_keys.jpeg)

### Step 1.2: Generating the Key

After clicking "Manage SSH Keys" and waiting for the next page to load, don't worry about any of the other options, just click the "+ Generate a New Key" button near the top:

![](images/generate_new_key_button.jpeg)

Within the key-generation form that appears, you don't need to enter or modify anything **except for the Key Password and Reenter Password fields**. The way these two fields are phrased is a bit confusing, since you already have a **password** to access Georgetown services in general (as in, the password that you use to log into Canvas, for example, that requires Two-Factor Authentication): **do not** enter that password here. This is a **new** password, really called a **passphrase**, and all it does it **protect your SSH private key from unauthorized usage**: if someone manages to steal your `id_rsa` file, they still won't be able to access your Georgetown Domains server without knowing this **passphrase**.

![](images/key_generation_form.jpeg)

So, choose a passphrase that is easy to remember and passes Georgetown's security requirements (it won't let you submit the form until the passphrase meets those requirements -- you can use the "Password Generator" button to auto-generate one if that's easier), and submit the form by clicking the "Generate Key" button at the bottom.

If all went well, you should see a success screen that says "Key Generation Complete!" at the top:

![](images/successful_generation.jpeg)

This screen is also confusing, because it makes it seem like you need to care about the console output that it shows you underneath "Key Generation Complete!", but in reality you don't need to worry about it (I excluded it here just in case).

### Step 1.3: Authorizing This Key to Acess Your Server

From the "Key Generation Complete!" screen, click the "Go Back" link at the bottom of the page to return to the SSH Key Generation panel. You should see the window you saw before, with the "+ Generate a New Key" button at the top, but now below this button you will also see your newly-created pair of keys: the **public key** just created will now be listed in the "Public Keys" list, and then underneath this the **private key** just created will be listed in the "Private Keys" list.

The first, basic step we need to do is verify with Georgetown Domains that the public key is a valid "keyhole" for remote computers to use to access your Domains server (you'll notice that it is not authorized by default, so you will see the status "not authorized" within the "Authorization Status" column of the Public Keys list). To activate it, scroll to the Public Keys list and click the "Manage" link (with a wrench icon to the left of it):

![](images/public_keys_list.jpeg)

This should bring up a screen where you can straightforwardly click the "Authorize" button to authorize this public key:

![](images/authorize_public_key.jpeg)

And, once you click this, you should see a success message like the following:

![](images/public_key_authorized.jpeg)

Click "Go Back" once again to return to the SSH Key Management page.

### Step 1.4: Downloading the Private Key

That is the last time we'll deal with the public key, the "keyhole" to your server, now that it has been authorized for use. Next, scroll further down to the Private Keys listing, where you should see your `id_rsa` private key that we generated in Step 1.2:

![](images/private_keys_listing.jpeg)

In this case, we **do** want to download this key (as a file) to our local computer, since the `ssh` (and `scp` and `rsync`) command will need to use this key to **acess** your server. So, click the "View/Download" button (with a disk icon to the left of it). This will bring you to a scary-looking page, that contains your full private key in a big textbox. You don't need to worry about this, or about the "Convert to PPK" section at the bottom of the page. Just scroll to the button which allows you to **download** the key file:

![](images/download_key_button.jpeg)

**IMPORTANT**: Make sure that, once this file has downloaded, you **move it** to a location on your local computer that is **secure** but also **easy to locate**, since you will need to know the **absolute path** to this file, in order to **tell the `ssh` command** where to find it. For example, if I copy the key file to my home directory on a Mac, its path might be:

```
/Users/jpj/id_rsa
```

If you're on Windows, and you move it directly onto your `C:` drive for example, then the path will instead be

```
C:\id_rsa
```

So, just make sure you **know this absolute path** to the `id_rsa` file, remembering that it **has no file extension**: it's not `id_rsa.txt`, or `id_rsa.pub` (that could be what the public key is called), but just `id_rsa` without extension.

## Step 2: Using the *Private Key* to Access Your Georgetown Domains Server

